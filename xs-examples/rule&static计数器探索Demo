
/* 
    经过一段时间的探索，我发现原来一直认为的 “在APE2-XS中，static 变量不能正常使用”，这样的观点其实是错误的。
    在这里简单说一下如何正确定义并使用 static 静态变量

    静态变量，一个特点就是(1)在定义之后不会被重复定义（全局唯一），且其数值在程序运行期间能保存上一次的结果，适合用作计数器
    (2). static 变量的另一个特点是，在其作用域范围内（rule内部），其值能被修改，在作用域外，不能对其修改。具有一定数据安全性！


*/

float random(){int n1=xsGetRandomNumber(); int I=xsGetRandomNumberLH(0,31); if(I>=30){n1=xsGetRandomNumberLH(0,16990);} float n2=0.000001*(n1+I*32767); return(n2);}

int kill_enemy(int points=0) {
    // 模拟击杀敌人比例，以浮点数代替.击杀比例越高，获得的奖励点数越多
    float rate = random();
    if(rate<0.2) {}
    else if(rate>=0.2 && rate<0.4) {points = 1;}
    else if(rate>=0.4 && rate<0.6) {points = 2;}
    else if(rate>=0.6 && rate<0.8) {points = 3;}
    else if(rate>=0.8) {points = 5;}
    return (points);
}


const int reInterval = 10;    // 重置rule的最小运行间隔
const int max_rewards = 10000;    // 奖励点数上限值
int rewards = 0;    // 全局奖励点数

rule RewardCounter
    inactive
    group Counters
    minInterval 0    // minInterval为0立即运行，创建 static变量，然后重置运行周期
    priority 100
{
    static int rewards_ = 0;
    if(reInterval > 0) {xsSetRuleMinIntervalSelf(reInterval);}
    rewards_ = rewards_ + kill_enemy();    // 通过不断的击杀敌人，累计奖励点数
    // 将计数结果同步到资源或变量
    xsSetPlayerAttribute(1, 8, rewards_);
    xsSetTriggerVariable(   8, rewards_);
    rewards = rewards_ ;    // 同步到XS全局变量
    
    if(rewards_ >= max_rewards) {
        xsDisableSelf();    // 当rule关闭之后， static 变量也同时被注销
    }
    
    //show_reward();
}


void show_reward(string show_way="global")
{// 展示当前击杀奖励点数
    if(show_way="global") {xsChatData("Current Rewards: "+ rewards);}
    else if(show_way=="static") {
        // 【！注意】在 Rule 之外，不能访问static变量的值
        //xsChatData("Current Rewards: "+ rewards_);
    }
}


void main() 
{
    xsEnableRule("RewardCounter");
}
